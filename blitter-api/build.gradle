import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.openapi.generator" version "6.2.1"
}

group = 'com.augtheo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
springBoot {
  mainClass = 'com.augtheo.blitter.BlitterAPIApplication'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/blitter-oas/blitter.yml"
    packageName = 'com.augtheo.blitter'
    configOptions = [
            interfaceOnly: 'true',
            openApiNullable: 'false',
            useBeanValidation: 'false',
            documentationProvider : 'none',
            packageName : 'com.augtheo.blitter',
            apiPackage : 'com.augtheo.blitter.api',
            modelPackage : 'com.augtheo.blitter.model',
            useSpringBoot3 : 'true',
            skipDefaultInterface : 'true',
            additionalModelTypeAnnotations : '@lombok.Builder @lombok.NoArgsConstructor @lombok.AllArgsConstructor'
    ]
    importMappings = [
            'java.time.OffsetDateTime' : 'java.time.LocalDateTime'
    ]
    typeMappings = [
            'OffsetDateTime' : 'LocalDateTime'
    ]
}

tasks.register('generateDocs', GenerateTask) {
    generatorName = 'markdown'
    inputSpec = "$rootDir/blitter-oas/blitter.yml"
    outputDir = "$rootDir/blitter-oas/docs/"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus:latest.release'

    // implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}")
    // implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
}

sourceSets.main.java.srcDirs += 'build/generate-resources/main/src/main/java'

compileJava.dependsOn([tasks.openApiGenerate , tasks.generateDocs])


test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
}
